#define STR_VALUE(arg) #arg

#define NAMESPACE_JOIN( a, b ) STR_VALUE(a.b)

#define CAT(a, ...) PRIMITIVE_CAT(a, __VA_ARGS__)
#define PRIMITIVE_CAT(a, ...) a ## __VA_ARGS__

#define RST_PROT( prot ) prot _ROOT _NOTHROW

#define PREF() CAT( __ , DOMAIN_NAME )
#define SUFF( name ) CAT( _ , name )

#define RET_PROT( ret, name, ... ) \
    RST_PROT( ret PROT_NAME( name )(__VA_ARGS__) );

#define PROT( name, ... ) \
    RET_PROT( DOMAIN_TYPE, name, __VA_ARGS__ )

#define PROT_NAME( name ) \
    CAT( PREF(), SUFF( name ) )

#define BINARY_PROT( name ) \
    PROT( name, DOMAIN_TYPE, DOMAIN_TYPE )

#define UNARY_PROT( name ) \
    PROT( name, DOMAIN_TYPE )

#define CAST_PROT( name ) \
    PROT( name, DOMAIN_TYPE, int bitwidth )

#define VAL_PROT( bitwidth ) \
    RET_PROT( uint ##bitwidth ## _t, val ## _i ## bitwidth, )

#define ASSUME_PROT() \
    PROT( assume, DOMAIN_TYPE val, DOMAIN_TYPE constraint, bool assume )

#define FREEZE_PROT() \
    RET_PROT( void, freeze, DOMAIN_TYPE val, void * addr )

#define THAW_PROT() \
    PROT( thaw, void * addr )

#define THAW_PROT_BV() \
    PROT( thaw, void * addr, int bw )

#define CLEANUP_PROT() \
    RET_PROT( void, cleanup, void )

#define STASH_PROT() \
    RET_PROT( void, stash, DOMAIN_TYPE val )

#define UNSTASH_PROT() \
    PROT( unstash )

#define LART_DOMAIN_SPEC( _tag ) \
    __attribute__((annotate( NAMESPACE_JOIN(lart.abstract.domain.spec, _tag) )))

#define LART_DOMAIN_KIND( _kind ) \
    __attribute__((annotate( NAMESPACE_JOIN(lart.abstract.domain.kind, _kind) )))

#include <rst/tristate.h>
typedef abstract::Tristate __tristate;


extern "C" {

RET_PROT( __tristate , bool_to_tristate, DOMAIN_TYPE )

ASSUME_PROT()

FREEZE_PROT()

CLEANUP_PROT()

STASH_PROT()
UNSTASH_PROT()

}
