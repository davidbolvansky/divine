#define STR_VALUE(arg) #arg

#define NAMESPACE_JOIN( a, b ) STR_VALUE(a.b)

#define CAT(a, ...) PRIMITIVE_CAT(a, __VA_ARGS__)
#define PRIMITIVE_CAT(a, ...) a ## __VA_ARGS__

#define RST_PROT( prot ) prot _ROOT _NOTHROW

#define PREF() CAT( __ , DOMAIN_NAME )
#define SUFF( name ) CAT( _ , name )

#define RET_PROT( ret, name, ... ) \
    RST_PROT( ret PROT_NAME( name )(__VA_ARGS__) );

#define PROT( name, ... ) \
    RET_PROT( DOMAIN_TYPE, name, __VA_ARGS__ )

#define PROT_NAME( name ) \
    CAT( PREF(), SUFF( name ) )

#define BINARY_PROT( name ) \
    PROT( name, DOMAIN_TYPE, DOMAIN_TYPE )

#define UNARY_PROT( name ) \
    PROT( name, DOMAIN_TYPE )

#define CAST_PROT( name ) \
    PROT( name, DOMAIN_TYPE, int bitwidth )

#define ICMP_PROT( name ) \
    PROT( icmp_ ## name, DOMAIN_TYPE, DOMAIN_TYPE )

#define LIFT_PROT() \
    PROT( lift, int bitwidth, int argc, ... )

#define VAL_PROT( bitwidth ) \
    RET_PROT( uint ##bitwidth ## _t, val ## _i ## bitwidth, )

#define ASSUME_PROT() \
    PROT( assume, DOMAIN_TYPE val, DOMAIN_TYPE constraint, bool assume )

#define LART_DOMAIN_TAG( _tag ) \
    __attribute__((annotate( NAMESPACE_JOIN(lart.abstract.domain.tag, _tag) )))

#define LART_DOMAIN_KIND( _kind ) \
    __attribute__((annotate( NAMESPACE_JOIN(lart.abstract.domain.kind, _kind) )))

#define LART_DOMAIN( tag, kind )        \
    LART_DOMAIN_TAG( tag )              \
    LART_DOMAIN_KIND( kind )            \
struct CAT( __lart_domain_, tag )       \
{} CAT( __lart_domain_, tag );


#include <rst/tristate.h>
typedef abstract::Tristate __tristate;

extern "C" {

LART_DOMAIN( DOMAIN_NAME, DOMAIN_KIND )

VAL_PROT( 8 )
VAL_PROT( 16 )
VAL_PROT( 32 )
VAL_PROT( 64 )

LIFT_PROT()

RET_PROT( __tristate , bool_to_tristate, DOMAIN_TYPE )

ASSUME_PROT()

BINARY_PROT( add )
BINARY_PROT( sub )
BINARY_PROT( mul )
BINARY_PROT( sdiv )
BINARY_PROT( udiv )
BINARY_PROT( urem )
BINARY_PROT( srem )
BINARY_PROT( and )
BINARY_PROT( or )
BINARY_PROT( xor )
BINARY_PROT( shl )
BINARY_PROT( lshr )
BINARY_PROT( ashr )

CAST_PROT( trunc )
CAST_PROT( zext )
CAST_PROT( sext )
UNARY_PROT( bitcast )

ICMP_PROT( eq )
ICMP_PROT( ne )
ICMP_PROT( ugt )
ICMP_PROT( uge )
ICMP_PROT( ult )
ICMP_PROT( ule )
ICMP_PROT( sgt )
ICMP_PROT( sge )
ICMP_PROT( slt )
ICMP_PROT( sle )

}
