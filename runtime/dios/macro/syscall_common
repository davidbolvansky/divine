#ifndef __MACRO_SYSCALL_COMMON__
#define __MACRO_SYSCALL_COMMON__

#include "base"

#define NEXT_NAME(BASE) BASE ## _

#define ARG_NAMES(...) IF(NOT(EMPTY(__VA_ARGS__)))(EVAL(ARG_NAMES_1(arg, __VA_ARGS__)))
#define ARG_NAMES_1(BASE, arg, ... ) \
    NEXT_NAME(BASE) \
    IF(NOT(EMPTY(__VA_ARGS__)))(POSTPONE(_ARG_NAMES_N)()(NEXT_NAME(BASE), __VA_ARGS__))
#define ARG_NAMES_N(BASE, arg, ... ) \
    , NEXT_NAME(BASE) \
    IF(NOT(EMPTY(__VA_ARGS__)))(POSTPONE(_ARG_NAMES_N)()(NEXT_NAME(BASE), __VA_ARGS__))
#define _ARG_NAMES_N() ARG_NAMES_N

#define ARG_NAMESC(...) IF(NOT(EMPTY(__VA_ARGS__)))(EVAL(ARG_NAMESC_N(arg, __VA_ARGS__)))
#define ARG_NAMESC_N(BASE, arg, ... ) \
    , NEXT_NAME(BASE) \
    IF(NOT(EMPTY(__VA_ARGS__)))(POSTPONE(_ARG_NAMESC_N)()(NEXT_NAME(BASE), __VA_ARGS__))
#define _ARG_NAMESC_N() ARG_NAMESC_N

#define NAMED_ARGS(...) IF(NOT(EMPTY(__VA_ARGS__)))(EVAL(NAMED_ARGS_1(arg, __VA_ARGS__)))
#define NAMED_ARGS_1(BASE, type, ...) \
    type NEXT_NAME(BASE) \
    IF(NOT(EMPTY(__VA_ARGS__)))(POSTPONE(_NAMED_ARGS_N)()(NEXT_NAME(BASE), __VA_ARGS__))
#define NAMED_ARGS_N(BASE, type, ... ) \
    , type NEXT_NAME(BASE) \
    IF(NOT(EMPTY(__VA_ARGS__)))(POSTPONE(_NAMED_ARGS_N)()(NEXT_NAME(BASE), __VA_ARGS__))
#define _NAMED_ARGS_N() NAMED_ARGS_N

#define UNNAMED_ARGS(...) IF(NOT(EMPTY(__VA_ARGS__)))(EVAL(UNNAMED_ARGS_1( __VA_ARGS__)))
#define UNNAMED_ARGS_1(type, ...) \
    type \
    IF(NOT(EMPTY(__VA_ARGS__)))(POSTPONE(_UNNAMED_ARGS_N)()(__VA_ARGS__))
#define UNNAMED_ARGS_N(type, ... ) \
    , type \
    IF(NOT(EMPTY(__VA_ARGS__)))(POSTPONE(_UNNAMED_ARGS_N)()(__VA_ARGS__))
#define _UNNAMED_ARGS_N() UNNAMED_ARGS_N

#define UNPACK(...) IF(NOT(EMPTY(__VA_ARGS__)))(EVAL(UNPACK_N(arg, __VA_ARGS__)))
#define UNPACK_N(BASE, type, ... ) \
    type NEXT_NAME(BASE) = va_arg( vl, type ); \
    IF(NOT(EMPTY(__VA_ARGS__)))(POSTPONE(_UNPACK_N)()(NEXT_NAME(BASE), __VA_ARGS__))
#define _UNPACK_N() UNPACK_N

#endif
