// -*- C++ -*- (c) 2015 Vladimír Štill <xstill@fi.muni.cz>

#include <divine.h>
#include <divine/problem.h>

#ifndef __LART_WEAKMEM_H_
#define __LART_WEAKMEM_H_
#include <stdint.h>
#include <stdlib.h>

#define __lart_weakmem_bypass __attribute__((__annotate__("lart.weakmem.bypass"), __annotate__("lart.weakmem.propagate")))

#if __cplusplus
#define __WM_NOTHROW throw()
#endif
#define __WM_INTERFACE_ATTR __WM_NOTHROW __attribute__((__noinline__, __flatten__, __annotate__("lart.weakmem.bypass"), __annotate__("lart.weakmem.propagate")))

#ifdef __cplusplus
extern "C" {
#endif

volatile extern int __lart_weakmem_buffer_size;

enum __lart_weakmem_order {
    __lart_weakmem_order_unordered = 0,
    __lart_weakmem_order_monotonic = 0x1,
    __lart_weakmem_order_acquire = 0x2 | __lart_weakmem_order_monotonic,
    __lart_weakmem_order_release = 0x4 | __lart_weakmem_order_monotonic,
    __lart_weakmem_order_acq_rel = __lart_weakmem_order_acquire | __lart_weakmem_order_release,
    __lart_weakmem_order_seq_cst = 0x8 | __lart_weakmem_order_acq_rel
};

#ifdef __divine__
void __lart_weakmem_store( char *addr, uint64_t value, uint32_t bitwidth, __lart_weakmem_order ord ) __WM_INTERFACE_ATTR;
uint64_t __lart_weakmem_load( char *addr, uint32_t bitwidth, __lart_weakmem_order ord ) __WM_INTERFACE_ATTR;

void __lart_weakmem_fence( __lart_weakmem_order ord ) __WM_INTERFACE_ATTR;
void __lart_weakmem_sync( char *addr, uint32_t bitwidth, __lart_weakmem_order ord ) __WM_INTERFACE_ATTR;
void __lart_weakmem_cleanup( int cnt, ... ) __WM_INTERFACE_ATTR;

/* memory manipulation "template" functions */
void __lart_weakmem_memmove( char *dest, const char *src, size_t n ) __WM_INTERFACE_ATTR;
void __lart_weakmem_memcpy( char *dest, const char *src, size_t n ) __WM_INTERFACE_ATTR;
void __lart_weakmem_memset( char *dest, int c, size_t n ) __WM_INTERFACE_ATTR;

/* following functions will be generated by LART */
void __lart_weakmem_memmove_weak( char *dest, const char *src, size_t n ) __WM_INTERFACE_ATTR;
void __lart_weakmem_memcpy_weak( char *dest, const char *src, size_t n ) __WM_INTERFACE_ATTR;
void __lart_weakmem_memset_weak( char *dest, int c, size_t n ) __WM_INTERFACE_ATTR;
/* end of generated functions */
#endif

#ifdef __cplusplus
} // extern "C"
#endif

#ifdef __cplusplus

namespace lart {
namespace weakmem {

enum class MemoryOrder : uint32_t {
    Unordered = __lart_weakmem_order_unordered,
    Monotonic = __lart_weakmem_order_monotonic,
    Acquire = __lart_weakmem_order_acquire,
    Release = __lart_weakmem_order_release,
    AcqRel = __lart_weakmem_order_acq_rel,
    SeqCst = __lart_weakmem_order_seq_cst
};

}
}

#endif // __cplusplus
#endif // __LART_WEAKMEM_H_
