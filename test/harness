#!/bin/sh

while echo $1 | grep -q =; do
    echo "$1"
    eval "export $1"
    shift
done

test -d "$TOOLS" -a -f "$TOOLS/divine" || {
    echo "TOOLS has to be directory with your divine binary."
    exit 1
}

if echo $TOOLS | grep -q "^C:"; then # MSYS hack
    TOOLS=`echo -n "$TOOLS" | sed -e 's,C:,/c,;s,\\\\,/,;'`
fi
PATH="$TOOLS:$PATH"

# fake ssh for mpiexec
cat > $TOOLS/ssh <<EOF
#!/bin/sh
test "\$1" = "-x" && shift
shift # hostname
eval "\$@"
EOF
chmod +x $TOOLS/ssh

test -z "$MPIEXEC" && MPIEXEC=false

tests="$@"

for t_ in $tests; do
    # cut+rev is nicer but the latter's in util-linux
    t=`echo $t_ | sed -e 's,.*/\([^/]\+/[^/]\+\)$,\1,'`
    test -n "$T" && {
        echo $t | grep -q $T || continue
    }
    printf "Running %-40s" "$t ..."
    outf=`mktemp output.XXXXXX`
    if test -n "$INTERACTIVE"; then bash $t_ ; else  bash $t_ > $outf 2>&1; fi
    ret=$?
    if test $ret = 0; then
	echo " passed."
    elif test $ret = 200; then
        skipped="$skipped $t"
	echo " skipped."
    else
	echo " FAILED!"
	len=`echo $t | wc -c`
	# fancy formatting...
	printf -- "--- Output: $t -"
	for i in `seq $(($len + 14)) 78`; do echo -n "-"; done; echo
        if test -z "$VERBOSE" && grep -q "^#### PASSED" $outf; then
            echo "`grep -c '^#### PASSED' $outf` sub-test(s) passed; use VERBOSE=1 to unhide them"
            while grep -q "^#### PASSED" $outf; do sed -e "1,/^#### PASSED/d" -i $outf; done
        fi
        cat $outf
	printf -- "--- End: $t ----"
	for i in `seq $(($len + 14)) 78`; do echo -n "-"; done; echo
	failed="$failed $t"
    fi
    rm -f $outf
done

if test -n "$skipped"; then
    echo "Tests skipped:"
    for t in $skipped; do
	printf "\t%s\n" $t
    done
fi

if test -n "$failed"; then
    echo "TESTS FAILED:"
    for t in $failed; do
	printf "\t%s\n" $t
    done
    exit 1
else
    echo "All tests passed."
fi
