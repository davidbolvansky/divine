# -*- sh -*-

. util

COMPRESSIONS="none"
if [ x$O_COMPRESSION = xON ]
then
    COMPRESSIONS="$COMPRESSIONS ntree"
fi

for_dve_small() {
    wrapper=$1; shift
    test "$O_DVE" = "ON" || return 0

    check clear
    run $wrapper data/empty.dve "$@" --property=deadlock
    check reachability_deadlock
    $extracheck data/empty.dve

    check clear
    run $wrapper data/test1.dve "$@" --property=LTL
    check ltl_invalid
    check statespace 7 14 3 0
    $extracheck data/test1.dve

    check clear
    run $wrapper data/test1-prop.dve "$@" --property=LTL
    check ltl_invalid
    check statespace 7 14 3 0

    check clear
    run $wrapper data/test2.dve "$@" --property=LTL
    check ltl_valid
    check owcty_sizes 2 2 0
    check statespace 3 2 2 2
    $extracheck data/test2.dve

    check clear
    run $wrapper data/test3.dve "$@" --property=LTL
    check ltl_valid
    check owcty_sizes 2 5 0
    check statespace 6 12 2 0
    $extracheck data/test3.dve

    check clear
    run $wrapper data/test4.dve "$@" --property=LTL
    check ltl_invalid
    check owcty_sizes 1 4 1
    check statespace 5 5 1 0
    $extracheck data/test4.dve

    check clear
    run $wrapper data/test5.dve "$@" --property=LTL
    check ltl_invalid
    check owcty_sizes 1 4 1
    check statespace 5 5 1 0
    $extracheck data/test5.dve

    check clear
    run $wrapper data/test6.dve "$@" --property=LTL
    check ltl_invalid
    check owcty_sizes 2 6 1 5 1
    check statespace 6 6 2 0
    $extracheck data/test6.dve

    check clear
    run $wrapper data/commit1.dve "$@" --property=deadlock
    check statespace 10 14 0 0
    $extracheck data/commit1.dve

    check clear
    run $wrapper data/commit2.dve "$@" --property=deadlock
    check statespace 8 8 0 2
    $extracheck data/commit2.dve

    check clear
    run $wrapper data/haoEEDM.dve "$@" --property=deadlock
    check statespace 502 922 0 0
    $extracheck data/haoEEDM.dve

    check clear
    run $wrapper data/bufchan.dve "$@" --property=deadlock
    check statespace 3 5 0 0
    $extracheck data/bufchan.dve

    check clear
    run $wrapper data/bufchan2.dve "$@" --property=deadlock
    check statespace 8 12 0 0
    $extracheck data/bufchan2.dve

    check clear
    run $wrapper data/unbufchan.dve "$@" --property=deadlock
    check statespace 2 3 0 0
    $extracheck data/unbufchan.dve

    check clear
    run $wrapper data/bufchan-local.dve "$@" --property=deadlock
    check statespace 3 5 0 0

    check clear
    run $wrapper data/bufchan-local2.dve "$@" --property=deadlock
    check statespace 3 5 0 0

    check clear
    run $wrapper data/bufchan2-local.dve "$@" --property=deadlock
    check statespace 8 12 0 0

    check clear
    run $wrapper data/unbufchan-local.dve "$@" --property=deadlock
    check statespace 2 3 0 0

    check clear
    run $wrapper data/unbufchan-local2.dve "$@" --property=deadlock
    check statespace 2 3 0 0

    check clear
    run $wrapper data/assert.dve "$@" --property=assert
    check reachability_goal
    check statespace 6 6 0 0

    check clear
    run $wrapper data/assert2.dve "$@" --property=assert
    check reachability_valid
    check statespace 6 6 0 0

    check clear
    run $wrapper data/B.prop1.dve "$@" --property=deadlock
    check statespace 24 32 0 8

    check clear
    run $wrapper data/B.prop1.dve "$@" --property=LTL
    check statespace 14 18 14 4

    check clear
    run $wrapper data/input.dve "$@" --property=deadlock
    check statespace 6 5 0 1

    check clear
    run $wrapper data/input.dve "$@" --property=deadlock -D i=7
    check statespace 4 3 0 1

    check clear
    run $wrapper data/ltltest1.dve "$@" --property=LTL
    check ltl_valid
    check statespace 1 0 1 1

    check clear
    run $wrapper data/ltltest2.dve "$@" --property=LTL
    check ltl_invalid
    check statespace 3 4 1 0

    check clear
    run $wrapper data/vararray.dve "$@" --property=deadlock
    check statespace 11 10 0 1

    check clear
    run $wrapper data/proc_instance.dve "$@" --property=deadlock
    check statespace 16 64 0 0
}

dve_small() {
    for_dve_small identity "$@"
}

dve_compiled_small() {
    for_dve_small dve_compile "$@"
}

llvm_small() {
    test "$O_LLVM" = "ON" || return 0

    check clear
    run llvm_assemble data/global-ok.ll "$@" --property=assert --reduce=tau+,taustores,heap
    check reachability_valid
    check statespace 46 87 0 0

    check clear
    run llvm_assemble data/global-bug.ll "$@" --property=assert --reduce=tau+,taustores,heap
    check reachability_goal
    check statespace 26 48 0 0
}

timed_small() {
    wrapper=$1; shift
    test "$O_TIMED" = "ON" || return 0

    check clear
    run $wrapper data/timed_arithm.xml "$@" --property=deadlock
    check reachability_valid
    check statespace 46 52 0 0

    check clear
    run $wrapper data/timed_clock.xml "$@" --property=deadlock
    check reachability_valid
    check statespace 220 221 0 0

    check clear
    run $wrapper data/bridge.xml "$@" --property=0
    check ltl_valid
    if test "$O_LTL3BA" = "ON"; then
       check statespace 2412 4848 0 0; else
       check statespace 1624 2779 0 0; fi
    
    check clear
    run $wrapper data/bridge.xml "$@" --property=1
    check ltl_invalid
    if test "$O_LTL3BA" = "ON"; then
        check statespace 2867 5795 303 0; else
        check statespace 1927 3283 303 0; fi

    check clear
    run $wrapper data/zeno.xml "$@" --property=0
    check ltl_invalid
    check statespace 2 2 2 0

    check clear
    run $wrapper data/zeno.xml "$@" --property=0 --fair
    check ltl_valid
    check statespace 7 8 3 3
}

murphi_small() {
    test "$O_MURPHI" = "ON" || return 0

    check clear
    run dve_compile data/abp.m "$@" --property=deadlock
    check reachability_valid
    check statespace 80 144 0 0
}

coin_small() {
    :
}

all_small() {
    dve_small "$@"
    dve_compiled_small "$@"
    llvm_small "$@"
    coin_small "$@"
    timed_small "$@"
    murphi_small "$@"
}

llvm_prepare() {
    cat > testcase.c
    test libdivine.a -nt `which divine` || ann divine compile --llvm --libraries-only
    ann divine compile --llvm testcase.c --precompiled=. >& progress
}

llvm_verify() {
    test "$O_LLVM" = "ON" || skip
    llvm_prepare
    ann divine verify testcase.bc -p assert -d -r 2>> progress | capture
    test "$1" == valid && check reachability_valid
    test "$1" == invalid && {
        check reachability_goal
        test -n "$2" && test -n "$3" && \
            grep -A 50 '== The goal ==' progress | grep -i "^$2" | grep "$3"
    }
    check clear
}

chmod +x check run

PATH=".:$PATH"
extracheck=:
export cesmiext=.so
test "$WIN32" = 1 && cesmiext=.dll

set -vex -o pipefail
trap "check debris" EXIT

