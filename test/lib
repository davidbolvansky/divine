# -*- sh -*-

not() { "$@" && exit 1 || return 0; }
map() { divine map --report "$@" 2> progress | tee report; }
ndfs() { divine nested-dfs --report "$@" 2> progress | tee report; }
owcty() { divine owcty --report "$@" 2> progress | tee report; }
reachability() { divine reachability --report "$@" 2> progress | tee report; }
metrics() { divine metrics --report "$@" 2> progress | tee report; }

mpi() {
    $MPIEXEC >& /dev/null || exit 200; # probably not found
    $MPIEXEC -H localhost,localhost divine "$@" --report 2> progress | tee report
}

ltl_valid() {
    test -f report || return 0
    grep "^Finished: Yes" report
    grep "^Property-Type: neverclaim" report || return 0
    grep "^Property-Holds: Yes" report
}

ltl_invalid() {
    test -f report || return 0
    grep "^Finished: Yes" report
    grep "^Property-Type: neverclaim" report || return 0
    grep "^Property-Holds: No" report
}

reachability_valid() {
    test -f report || return 0
    grep "^Finished: Yes" report
    grep "^Property-Type: reachability" report || return 0
    grep "^Property-Holds: Yes" report
}

reachability_deadlock() {
    test -f report || return 0
    grep "^Finished: Yes" report
    grep "^Property-Type: reachability" report || return 0
    grep "^Property-Holds: No" report
    grep "^CE-Type: deadlock" report
}

reachability_goal() {
    test -f report || return 0
    grep "^Finished: Yes" report
    grep "^Property-Type: reachability" report || return 0
    grep "^Property-Holds: No" report
    grep "^CE-Type: goal" report
}

reachability_any() {
    test -f report || return 0
    grep "^Finished: Yes" report
    grep "^Property-Type: reachability" report || return 0
    grep "^Property-Holds: No" report
    grep "^CE-Type: goal" report || grep "^CE-Type: deadlock" report
}

statespace() {
    test -f report || return 0
    op=-eq
    grep "^Full-State-Space: No" report && op=-le
    grep "^Transformations:.*POR" report && op=-le

    states=`grep ^States-Visited report | cut -d' ' -f2`
    trans=`grep ^Transition-Count report | cut -d' ' -f2`
    accept=`grep ^States-Accepting report | cut -d' ' -f2`
    dead=`grep ^Deadlock-Count report | cut -d' ' -f2`

    test $states $op $1
    test "$trans" = "-" || test $trans $op $2
    test $accept $op $3
    test "$dead" = "-" || test $dead $op $4
}

clear() {
    rm -f progress report
}

owcty_sizes() {
    test -f report || return 0
    test -f progress || return 0

    if ! grep -q "^Algorithm: OWCTY" report; then return 0; fi
    if grep -q "^Full-State-Space: No" report; then return 0; fi
    if grep -q "^Transformations:.*POR" report; then return 0; fi

    grep '|S| = ' progress | sed -r -e 's,[^0-9]*([0-9]+).*,\1,' > numbers
    rm -f numbers-right
    for n in $@; do echo $n >> numbers-right; done
    diff -u numbers-right numbers
}

for_dve_small() {
    wrapper=$1
    shift

    clear
    $wrapper data/test1.dve "$@"
    ltl_invalid
    statespace 7 15 3 0

    clear
    $wrapper data/test2.dve "$@"
    ltl_valid
    owcty_sizes 2 2 0
    statespace 3 3 2 2

    clear
    $wrapper data/test3.dve "$@"
    ltl_valid
    owcty_sizes 2 5 0
    statespace 6 13 2 0

    clear
    $wrapper data/test4.dve "$@"
    ltl_invalid
    owcty_sizes 1 4 1
    statespace 5 6 1 0

    clear
    $wrapper data/test5.dve "$@"
    ltl_invalid
    owcty_sizes 1 4 1
    statespace 5 6 1 0

    clear
    $wrapper data/test6.dve "$@"
    ltl_invalid
    owcty_sizes 2 6 1 5 1
    statespace 6 7 2 0
}

unwrap() {
    file=$1
    shift
    "$@" "$file"
}

dve_small() {
    for_dve_small unwrap "$@"
}

compile() {
    file=$1
    shift

    divine compile $file
    "$@" `basename $file.so`
}

dve_compiled_small() {
    for_dve_small compile "$@"
}

llvm_small() {
    :
}

coin_small() {
    :
}

all_small() {
    dve_small "$@"
    llvm_small "$@"
    coin_small "$@"
}

set -vex -o pipefail
trap "test -f progress && cat progress" EXIT

