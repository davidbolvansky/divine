#!/usr/bin/perl
use strict;

my ( $tags_common, $tags, @tests, $vopt, $ccopt, $bt );
my $testcase = $ARGV[0];
my $dir = $ARGV[0];
$dir =~ s,^(.*)/.*?$,$1,;
$testcase =~ s,^.*/(.*?)[.]bt,$1,;
my $src = "$ENV{SRC_ROOT}/bricks/brick-$testcase";
#my $helper = "$dir/cxa_demangle.helper.cpp";

{
    local $/; # slurp
    open BT, $ARGV[0];
    $bt = <BT>;
    $tags_common = $1 if $bt =~ /^common tags: (.*)$/sm;
    close BT;
}

for ( split /\n/, $bt )
{
    next unless /\|/;
    my ( $tags, $arg ) = split /\|/;
    $tags .= " $tags_common";
    $ccopt = "-std=c++17";
    chomp( $tags );

    for my $variant ( "sim_oom", "no_oom" )
    {
        if ( $variant eq "no_oom" ) { $vopt = "-o nofail:malloc" } else { $tags .= " ext"; }
        my $file = $arg;

        $arg =~ /^(.*)::(.*?)$/;
        my $class = $1;
        my $func = $2;

        $file =~ s,^.*?::.*?::,,;
        $file =~ s,::,_,g;
        $file =~ s!,\s*!_!g;
        $file =~ s,<\s*,_,g;
        $file =~ s,\s*>,_,g;
        $file =~ s![:,/<> ]!_!g;
        $file =~ tr,A-Z,a-z,;

        open F, ">$file.$variant.cpp";
        print F <<EOF;
/* TAGS: $tags */
/* CC_OPTS: $ccopt -I$ENV{SRC_ROOT}/bricks/ */
/* VERIFY_OPTS: $vopt */
/* PROGRAM_OPTS: "$arg" */

#define NVALGRIND
#define BRICK_UNITTEST_DEF
#include <brick-unittest>
#include <brick-$testcase>

int main()
{
    $class().$func();
}
EOF
        print F <<EOF if ( $variant eq "sim_oom" );
__attribute__((constructor(0))) static void _test_set_terminate_handler()
{
    std::set_terminate( [] { exit( 0 ); __builtin_unreachable(); } );
}
EOF
        close F;
    }
}
